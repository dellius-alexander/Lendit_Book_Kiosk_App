<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- Parent: org.springframework.boot -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<!-- Project Description: -->
	<groupId>com.library</groupId>
	<artifactId>lendit_book_kiosk</artifactId>
	<version>0.2</version>
	<name>lendit_book_kiosk</name>
	<description>The textbook for higher education is soaring every year. Clayton State University initiated campus textbook lending kiosk project to help students learning and reduce cost.</description>
	 <scm>
		 <!-- gh repo clone dellius-alexander/Lendit_Book_Kiosk_App -->
		<url>scm:git:git@github.com:dellius-alexander/Lendit_Book_Kiosk_App.git</url>
		<connection>scm:git:git@github.com:dellius-alexander/Lendit_Book_Kiosk_App.git</connection>
		<developerConnection>scm:git:git@github.com:dellius-alexander/Lendit_Book_Kiosk_App.git</developerConnection>
		 <tag>
			dev
		 </tag>
	</scm>

	<properties>
		<java.version>11</java.version>
		<!-- <project.build.sourceEncoding>US-ASCII</project.build.sourceEncoding> -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <company>com.library</company>
        <appname>lendit_book_kiosk</appname>		
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<maven.compiler.release>${java.version}</maven.compiler.release>
		<thymeleaf.version>3.1.0.M1</thymeleaf.version>
		<thymeleafspringsecurity5.version>3.1.0.M1</thymeleafspringsecurity5.version>
		<springframework.version>5.3.17</springframework.version>
		<springsecurity.version>5.6.2</springsecurity.version>
		<maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version>
		<hsqldb.version>1.8.0.10</hsqldb.version>
		<hibernate.version>5.6.7.Final</hibernate.version>
		<hibernate.validator.version>7.0.3.Final</hibernate.validator.version>
		<mysql.version>8.0.28</mysql.version>
		<spring-boot-maven-plugin.version>2.6.5</spring-boot-maven-plugin.version>
<!--		<springdoc-openapi-maven-plugin></springdoc-openapi-maven-plugin>-->
		<springdoc.version>1.6.6</springdoc.version>
		<com.auth0.java-jwt.version>3.19.0</com.auth0.java-jwt.version>
    </properties>

	<dependencies>

		<!--
		Vault is an identity-based secrets and encryption management system. A secret is anything that
		you want to tightly control access to, such as API encryption keys, passwords, or certificates.
		Vault provides encryption services that are gated by authentication and authorization methods.
		Using Vaultâ€™s UI, CLI, or HTTP API, access to secrets and other sensitive data can be securely
		stored and managed, tightly controlled (restricted), and auditable.
		See: https://www.vaultproject.io/docs/what-is-vault
		https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-vault-config
		-->
<!--		<dependency>-->
<!--			<groupId>org.springframework.cloud</groupId>-->
<!--			<artifactId>spring-cloud-starter-vault-config</artifactId>-->
<!--			<version>3.1.0</version>-->
<!--		</dependency>-->


		<!-- 		https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager -->
<!--		<dependency>-->
<!--			<groupId>org.hibernate</groupId>-->
<!--			<artifactId>hibernate-entitymanager</artifactId>-->
<!--			<version>${hibernate.version}</version>-->
<!--		</dependency>-->

		<!--		 https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
<!--		<dependency>-->
<!--			<groupId>org.hibernate.validator</groupId>-->
<!--			<artifactId>hibernate-validator</artifactId>-->
<!--			<version>${hibernate.validator.version}</version>-->
<!--		</dependency>-->

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.210</version>
			<scope>runtime</scope>
		</dependency>

		<!-- HSQL Dependency -->
		<dependency>
			<groupId>hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${hsqldb.version}</version>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
            <version>${spring-boot-maven-plugin.version}</version>
        </dependency>


		<!-- https://mvnrepository.com/artifact/org.json/json -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20220320</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<version>${spring-boot-maven-plugin.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<version>5.6.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
			<version>5.6.2</version>
			<!-- <version>5.0.4.RELEASE</version> -->
        </dependency>

		<!-- For datasource configuration -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <!-- <version>2.1.1</version> -->
        </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<version>${spring-boot-maven-plugin.version}</version>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api -->
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>javax.persistence-api</artifactId>
			<version>2.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>${maven.surefire.plugin.version}</version>
		</dependency>

		<dependency>
			<groupId>com.hackerrank.applications</groupId>
			<artifactId>junit-ordered-test-runner</artifactId>
			<version>1.0.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${spring-boot-maven-plugin.version}</version>
        </dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring-boot-maven-plugin.version}</version>
        </dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot-maven-plugin.version}</version>
        </dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot-maven-plugin.version}</version>
            <scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!--		We are using thymeleaf for webmvc	-->
		<dependency>
		  <groupId>org.thymeleaf</groupId>
		  <artifactId>thymeleaf-spring5</artifactId>
		  <version>${thymeleaf.version}</version>
		  <scope>compile</scope>
		</dependency>

		<dependency>
		  <groupId>org.thymeleaf.extras</groupId>
		  <artifactId>thymeleaf-extras-springsecurity5</artifactId>
		  <version>${thymeleafspringsecurity5.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect -->
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
			<version>3.1.0</version>
		</dependency>

		<dependency>
		  <groupId>javax.servlet</groupId>
		  <artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-core</artifactId>
		  <version>${springframework.version}</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-beans</artifactId>
		  <version>${springframework.version}</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-context</artifactId>
		  <version>${springframework.version}</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-tx</artifactId>
		  <version>${springframework.version}</version>
		</dependency>

		<dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-webmvc</artifactId>
		  <version>${springframework.version}</version>
		</dependency>


		<dependency>
		  <groupId>org.springframework.security</groupId>
		  <artifactId>spring-security-core</artifactId>
		  <version>${springsecurity.version}</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework.security</groupId>
		  <artifactId>spring-security-web</artifactId>
		  <version>${springsecurity.version}</version>
		</dependency>
		<dependency>
		  <groupId>org.springframework.security</groupId>
		  <artifactId>spring-security-config</artifactId>
		  <version>${springsecurity.version}</version>
		</dependency>

		<!-- bootstrap and jquery -->
		<!-- https://mvnrepository.com/artifact/org.webjars/jquery -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.webjars/bootstrap -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.1.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>
		<!--	API Documentation setup -->
		<!--
		Spring WebMvc support
		- Documentation will be available at the following url for json format: http://server:port/context-path/v3/api-docs
		- server: The server name or IP
		- port: The server port
		- context-path: The context path of the application
		- Documentation will be available in yaml format as well, on the following path : /v3/api-docs.yaml
		- Add the library to the list of your project dependencies. (No additional configuration is needed)
		-->
<!--		&lt;!&ndash; https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-webmvc-core &ndash;&gt;-->
<!--		<dependency>-->
<!--			<groupId>org.springdoc</groupId>-->
<!--			<artifactId>springdoc-openapi-webmvc-core</artifactId>-->
<!--			<version>1.6.6</version>-->
<!--			<scope>test</scope>-->
<!--		</dependency>-->

		<!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.6.6</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.auth0/java-jwt -->
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>${com.auth0.java-jwt.version}</version>
		</dependency>


	<!--
	https://mvnrepository.com/artifact/org.springframework.boot/springdoc-openapi-javadoc
	Javadoc support
	For a project that wants to enable javadoc support, you should add the following
	dependency, in combination with the springdoc-openapi-ui dependency:
	-->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-javadoc</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/springdoc-openapi-security -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-security</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<!--	https://mvnrepository.com/artifact/org.springframework.boot/springdoc-openapi-data-rest
			This dependency enables the support of spring-boot-starter-data-rest types like:
			@RepositoryRestResource and QuerydslPredicate annotations.
			-->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-data-rest</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<version>${spring-boot-maven-plugin.version}</version>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<!--
				Copy resources directory
				-->
				<directory>src/main/resources</directory>
				<includes>
					<include>**/**</include>
				</includes>
			</resource>
			<resource>
				<!--

				-->
				<directory>src/main/docker</directory>
				<includes>
					<include>**/**</include>
				</includes>
				<targetPath>docker</targetPath>
			</resource>

			<resource>
				<!--
				 -->
				<directory>src/main/java</directory>
				<includes>
<!--					<include>**/*.properties</include>-->
<!--					<include>**/*.xml</include>-->
<!--					<include>**/*.json</include>-->
<!--					<include>**/*.html</include>-->
<!--					<include>**/*.jsp</include>-->
<!--					<include>**/*.sql</include>-->
<!--					<include>**/*.css</include>-->
<!--					<include>**/*.js</include>-->
					<include>**/**</include>
				</includes>
			</resource>

		</resources>
		<plugins>

			<plugin>
			<!--  -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
			</plugin>

			<plugin>
			<!--  -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.1</version>
				<configuration>
				<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>

			<plugin>
			<!--  -->
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
			</plugin>

			<!--
			The aim of springdoc-openapi-maven-plugin is to generate json and yaml
			OpenAPI description during build time. The plugin works during integration-tests
			phase, and generate the OpenAPI description. The plugin works in conjunction
			with spring-boot-maven plugin. In order to use this functionality, you need to
			add the plugin declaration on the plugins section of your pom.xml:
			-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot-maven-plugin.version}</version>
				<configuration>
					<jvmArguments>-Dspring.application.admin.enabled=true</jvmArguments>
					<excludes>
						<exclude>
							<groupId>org.project-lombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>pre-integration-test</id>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>post-integration-test</id>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springdoc</groupId>
				<artifactId>springdoc-openapi-maven-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<apiDocsUrl>http://localhost:8081/v3/api-docs</apiDocsUrl>
					<outputFileName>openapi.json</outputFileName>
					<outputDir>${project.build.directory}</outputDir>
				</configuration>
			</plugin>

			<!--
			Enable the annotation processor of therapi-runtime-javadoc in order to
			enable javadoc support for springdoc-openapi.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>com.github.therapi</groupId>
							<artifactId>therapi-runtime-javadoc-scribe</artifactId>
							<version>0.13.0</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<dependencyManagement>
	
		<dependencies>
			<!--
			ASM is an all purpose Java bytecode manipulation and analysis framework. It can
			be used to modify existing classes or to dynamically generate classes, directly
			in binary form. ASM provides some common bytecode transformations and analysis
			algorithms from which custom complex transformations and code analysis tools can
			be built. ASM offers similar functionality as other Java bytecode frameworks,
			but is focused on performance. Because it was designed and implemented to be
			as small and as fast as possible, it is well suited for use in dynamic systems
			(but can of course be used in a static way too, e.g. in compilers).
			-->
			<dependency>
				<groupId>org.ow2.asm</groupId>
				<artifactId>asm</artifactId>
				<version>9.1</version>
			</dependency>

		</dependencies>

	</dependencyManagement>
</project>