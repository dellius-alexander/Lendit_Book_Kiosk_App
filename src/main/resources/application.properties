#********************************************************************
# = Application Server Configuration file
#********************************************************************
# Change server port
server.port=8081
# Database connection properties
spring.datasource.url=jdbc:mysql://localhost:3306/Lendit_Book_Kiosk
spring.datasource.username=root
spring.datasource.password=developer
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Jpa needs the type of DB backend we have, the following values are valid:
# [DB2,DEFAULT,DERBY,H2,HANA,HSQL,INFORMIX,MYSQL,ORACLE,POSTGRESQL,SQL_SERVER,SYBASE]
#spring.jpa.database=MYSQL
# set this value to [update] value so that a table will be created in the database
# automatically corresponding to defined data model. Any change to the model
# will also trigger an update to the table. For production, this property should be [validate].
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
#********************************************************************
# Initialize a Database
#********************************************************************
# Spring Boot can automatically create the schema (DDL scripts) of your
# DataSource and initialize it (DML scripts). It loads SQL from the standard
# root classpath locations: schema.sql and data.sql, respectively. In addition,
# Spring Boot processes the schema-${platform}.sql and data-${platform}.sql
# files (if present), where platform is the value of spring.datasource.platform.
# This allows you to switch to database-specific scripts if necessary. For
# example, you might choose to set it to the vendor name of the database
# (hsqldb, h2, oracle, mysql, postgresql, and so on).
# Create the schema (DDL scripts) of your DataSource and initialize it (DML scripts)
# Loads SQL from the standard root classpath locations: schema.sql and data.sql,
# respectively. In addition, Spring Boot processes the schema-${platform}.sql and
# data-${platform}.sql files (if present), where platform is the value of:
# spring.datasource.platform={platform}
spring.datasource.platform=mysql
# Spring Boot automatically creates the schema of an embedded DataSource. This
# behavior can be customized by using the spring.datasource.initialization-mode
# property (and it can also be always or never).
spring.datasource.initialization-mode=always
# By default, Spring Boot enables the fail-fast feature of the Spring JDBC
# initializer, so, if the scripts cause exceptions, the application fails to
# start. You can tune that behavior by setting:
# spring.datasource.continue-on-error=[true|false]
# NOTE: In a JPA-based app, you can choose to let Hibernate create the schema
# or use schema.sql, but you cannot do both. Make sure to disable
# spring.jpa.hibernate.ddl-auto if you use schema.sql.
#spring.datasource.continue-on-error=true
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery = SELECT 1
# JPA properties
spring.jpa.show-sql=true
# disable database queries being performed during view rendering
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Enable spring data repos
spring.data.jpa.repositories.enabled=true
# Enable error logging
#server.error.include-message=always

#server.error.include-stacktrace=always

spring.mvc.view.prefix=classpath:/templates
spring.mvc.view.suffix=.html
spring.mvc.static-path-pattern=classpath:/templates
# server.tomcat.remoteip.remote-ip-header=x-forwarded-for
# server.tomcat.remoteip.protocol-header=x-forwarded-proto
spring.main.allow-bean-definition-overriding=true
#********************************************************************
# = Thymeleaf configurations
#********************************************************************
server.servlet.context-path=/
# Enable template caching. set to false for hot refresh
spring.thymeleaf.cache=false
# Check that the template exists before rendering it.
spring.thymeleaf.check-template=true
# Check that the templates location exists.
spring.thymeleaf.check-template-location=true
# Content-Type value. ;charset=<encoding> is added
spring.thymeleaf.content-type=text/html
# Enable MVC Thymeleaf view resolution.
spring.thymeleaf.enabled=true
# Template encoding.
spring.thymeleaf.encoding=UTF-8
## Comma-separated list of view names that should be excluded from resolution.
#spring.thymeleaf.excluded-view-names=
# Template mode to be ap-plied to templates. See also StandardTemplateModeHandlers.
spring.thymeleaf.mode=HTML
# Prefix that gets prepended to view names when building a URL.
spring.thymeleaf.prefix=classpath:/templates,classpath:/fragments
# Suffix that gets appended to view names when building a URL.
spring.thymeleaf.suffix=.html

## Order of the template resolver in the chain.
#spring.thymeleaf.template-resolver-order=
## Comma-separated list of view names that can be resolved.
spring.thymeleaf.view-names=login,index,error,hello
#********************************************************************
## =  MySQL DB properties for raw mysql driver (not used), testing only
#********************************************************************
#mysql.driver=com.mysql.cj.jdbc.Driver
#mysql.jdbcUrl=jdbc:mysql://Lendit_Book_Kiosk-db:3306/Lendit_Book_Kiosk
#mysql.username=root
#mysql.password=developer
## Placed her to help @Override WebMvcConfig.localeResolver()
#********************************************************************
# Hibernate config
#********************************************************************
hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#********************************************************************
# See Spring Logging:
# https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-logging.html
# root logging setup
logging.level.root=debug
spring.devtools.add-properties=false
#********************************************************************
# Setting up springdoc-openapi-ui
# and Swagger 3
#********************************************************************
# The OpenAPI descriptions will be available at the path /v3/api-docs by default:
# http://localhost:8080/v3/api-docs/
# To use a custom path, assign a new endpoint custom path
# to:
# springdoc.api-docs.path=/{PATH}
# OpenAPI definitions are in JSON format by default. For yaml format,
# we can obtain the definitions at:
# http://localhost:8080/api-docs.yaml
springdoc.api-docs.path=/api-docs
# Boolean. To disable the springdoc-openapi groups
springdoc.api-docs.groups.enabled=true
# Springdoc-openapi also supports swagger-ui properties. These can be
# used as Spring Boot properties, with the prefix springdoc.swagger-ui.
# String, For custom path of the swagger-ui HTML documentation
springdoc.swagger-ui.path=/swagger-ui.html
## To sort the API paths in order of their HTTP methods, we can add:
#springdoc.swagger-ui.operationsSorter=method
# Boolean. To disable the swagger-ui endpoint (/swagger-ui.html by default).
springdoc.swagger-ui.enabled=true
## Disabling the /v3/api-docs endpoint redefined in
## the property [springdoc.api-docs.path=/api-docs]
springdoc.api-docs.enabled=true
#********************************************************************
## String. URL to fetch external configuration document from classpath:
#springdoc.swagger-ui.configUrl=/api-docs/swagger-config
#********************************************************************
#springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.groups-order=DESC
## Boolean. To disable the swagger-ui default petstore url. (Available since v1.4.1).
springdoc.swagger-ui.disable-swagger-default-url=false
springdoc.swagger-ui.use-root-path=false
springdoc.show-actuator=true
## By default, all web endpoints are available beneath the path /actuator
## with URLs of the form /actuator/{id}. The /actuator base path can be
## configured by using the management.endpoints.web.base-path property
#management.endpoints.web.base-path=/manage
#management.server.port=8084






